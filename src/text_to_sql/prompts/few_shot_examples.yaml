- name: "Combined Ranking Example"
  question: "Give me top 25 batsmen with a combination of best strike rate and average in ipl 2025 having equal weightage for both strikerate and average"
  sql: |
    WITH BatterStats AS (
      SELECT
        d.batter_identifier,
        SUM(d.runs_batter) AS total_runs,
        SUM(CASE WHEN d.extras_wides = 0 THEN 1 ELSE 0 END) AS total_balls_faced,
        COUNT(w.wicket_id) AS total_outs
      FROM Deliveries AS d
      JOIN Innings AS i ON d.inning_id = i.inning_id AND NOT i.is_super_over -- Do not consider super over stats, default case
      JOIN Matches AS m ON i.match_id = m.match_id
      LEFT JOIN Wickets AS w ON d.delivery_id = w.delivery_id AND d.batter_identifier = w.player_out_identifier
      WHERE m.season_year = 2025
      GROUP BY d.batter_identifier
      HAVING SUM(CASE WHEN d.extras_wides = 0 THEN 1 ELSE 0 END) >= 50
    ),
    CalculatedAverages AS (
      SELECT
        p.first_last_name, # Use this field always to display the player names for the final output
        s.total_runs,
        (s.total_runs::FLOAT / NULLIF(s.total_balls_faced, 0)) * 100 AS strike_rate,
        (s.total_runs::FLOAT / NULLIF(s.total_outs, 0)) AS batting_average
      FROM BatterStats AS s
      JOIN Players AS p ON s.batter_identifier = p.identifier
    ),
    RankedStats AS (
      SELECT
        name,
        strike_rate,
        batting_average,
        RANK() OVER (ORDER BY strike_rate DESC) AS rank_sr,
        RANK() OVER (ORDER BY batting_average DESC) AS rank_avg
      FROM CalculatedAverages
      WHERE strike_rate IS NOT NULL AND batting_average IS NOT NULL
    )
    SELECT
      name,
      ROUND(strike_rate::numeric, 2) AS strike_rate,
      ROUND(batting_average::numeric, 2) AS batting_average,
      (rank_sr + rank_avg) AS combined_rank_score
    FROM RankedStats
    ORDER BY
      combined_rank_score ASC
    LIMIT 25; -- user defined limit

- name: "Boundary Counting Example"
  question: "Which batter hit the most sixes in the 2024 season of IPL?"
  sql: |
    SELECT
      p.first_last_name AS batter_name, # Use this field always to display the player names for the final output
      COUNT(*) AS sixes_count
    FROM Deliveries AS d
    JOIN Players AS p
      ON d.batter_identifier = p.identifier
    JOIN Innings AS i
      ON d.inning_id = i.inning_id AND NOT i.is_super_over -- Do not consider super over stats, default case
    JOIN Matches AS m
      ON i.match_id = m.match_id
    WHERE
      d.runs_batter = 6 AND m.season_year = 2024
    GROUP BY
      p.name
    ORDER BY
      sixes_count DESC
    LIMIT 10; -- default limit

- name: "Partnership Run Rate Example"
  question: "Among batting pairs with at least 300 runs, which one had the best run rate in IPL 2024?"
  sql: |
    WITH PartnershipStats AS (
      SELECT
        LEAST(d.batter_identifier, d.non_striker_identifier) AS player1_id,
        GREATEST(d.batter_identifier, d.non_striker_identifier) AS player2_id,
        SUM(d.runs_batter) AS partnership_runs,
        -- This is the corrected logic for legitimate balls (excluding wides AND no-balls).
        COUNT(CASE WHEN d.extras_wides = 0 AND d.extras_noballs = 0 THEN 1 END) AS legitimate_balls
      FROM Deliveries d
      JOIN Innings i ON d.inning_id = i.inning_id AND NOT i.is_super_over -- Do not consider super over stats, default case
      JOIN Matches m ON i.match_id = m.match_id
      WHERE m.season_year = 2024
      GROUP BY
        LEAST(d.batter_identifier, d.non_striker_identifier),
        GREATEST(d.batter_identifier, d.non_striker_identifier)
      HAVING
        SUM(d.runs_batter) >= 300
    )
    SELECT
      p1.first_last_name AS player1, # Use this field always to display the player names for the final output
      p2.first_last_name AS player2, # Use this field always to display the player names for the final output
      ps.partnership_runs,
      ROUND((ps.partnership_runs * 6.0 / NULLIF(ps.legitimate_balls, 0)), 2) AS run_rate
    FROM PartnershipStats ps
    JOIN Players p1 ON ps.player1_id = p1.identifier
    JOIN Players p2 ON ps.player2_id = p2.identifier
    ORDER BY run_rate DESC
    LIMIT 10; -- default limit

- name: "Hat trick checking example"
  question: "who has taken most hat tricks in ipl?"
  sql: |
    WITH Deliveries AS (
    	-- Add running_ball_number for each bowler in an inning
    	SELECT 
    		ROW_NUMBER() OVER (PARTITION BY inning_id, bowler_identifier ORDER BY delivery_id ASC) AS bowler_ball_num,
    		*
    	FROM deliveries
    ),
    BowlerWickets AS (
    	-- identify every credited wicket and its bowler
    	SELECT
    	d.inning_id,
    	d.delivery_id,
    	w.bowler_credited_identifier AS bowler_id,
    	bowler_ball_num AS wicket
    	FROM Deliveries d
    	JOIN Wickets w ON d.delivery_id = w.delivery_id
    	WHERE w.bowler_credited_identifier IS NOT NULL
    ),
    HatrickCandidates AS (
    	-- Find out the ball numbers for the previous wicket and previous-to-previous wicket
    	SELECT 
    		*,
    		LAG(wicket, 1) OVER (PARTITION BY inning_id, bowler_id ORDER BY delivery_id ASC) AS wicket_prev,
    		LAG(wicket, 2) OVER (PARTITION BY inning_id, bowler_id ORDER BY delivery_id ASC) AS wicket_prev_prev
    	FROM BowlerWickets
    )
    SELECT
    	-- If previous and previous-to-previous wicket occured in consecutive ball_numbers then consider it as a hat trick
    	p.first_last_name AS bowler_name, # Use this field always to display the player names for the final output
    	COUNT(ht.bowler_id) AS hat_tricks_count
    FROM HatrickCandidates ht
    JOIN Players p ON ht.bowler_id = p.identifier
    WHERE 
    	wicket = wicket_prev+1 AND wicket_prev = wicket_prev_prev+1
    GROUP BY
      	p.name
    ORDER BY
      	hat_tricks_count DESC
    LIMIT 10;

- name: "Runs conceded by a bowler"
  question: "How many runs Josh Hazlewood conceded in IPL 2025?"
  sql: |
    SELECT
      SUM(d.runs_batter) + SUM(d.extras_wides) + SUM(d.extras_noballs) AS total_runs_conceded -- Only wides, noballs and runs scored by the batsman are tallied towards the bowler figures
    FROM Deliveries AS d
    JOIN Innings AS i
      ON d.inning_id = i.inning_id AND NOT i.is_super_over
    JOIN Matches AS m
      ON i.match_id = m.match_id
    WHERE
      d.bowler_identifier = get_player_id_by_name('Josh Hazlewood') AND m.season_year = 2025;

- name: "Centuries example"
  question: "How many centuries Chris Gayle has scored in IPL?"
  sql: |
    WITH Hundreds AS (
    SELECT 
    	inning_id,
    	batter_identifier,
    	SUM(runs_batter) AS runs
    FROM Deliveries d
    WHERE
    	batter_identifier = (SELECT get_player_id_by_name('Chris Gayle'))
    GROUP BY 
    	inning_id,
    	batter_identifier
    HAVING SUM(runs_batter) >= 100
    )
    SELECT 
    	first_last_name AS player,
    	COUNT(1) AS total_centuries
    FROM Hundreds h
    JOIN Players p ON h. batter_identifier = p.identifier
    GROUP BY first_last_name
    
- name: "Usage of time-frame based LIMIT"
  question: "What is the average first innings score in ipl season wise?"
  sql: |
    SELECT
      m.season_year,
      ROUND(AVG(total_runs)::numeric, 2) AS average_first_innings_score
    FROM Matches AS m
    JOIN Innings AS i
      ON m.match_id = i.match_id
    JOIN (
      SELECT
        inning_id,
        SUM(runs_total) AS total_runs
      FROM Deliveries
      GROUP BY
        inning_id
    ) AS d
      ON i.inning_id = d.inning_id
    WHERE
      i.inning_number = 1 AND NOT i.is_super_over
    GROUP BY
      m.season_year
    ORDER BY
      m.season_year DESC
    LIMIT 100; -- max limit, because the user is asking for a particular subset of data that is "every season")